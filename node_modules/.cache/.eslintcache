[{"C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\index.js":"1","C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\App.js":"2","C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\comp\\landing page\\LandingPage.js":"3","C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\comp\\Contact\\Contact.js":"4","C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\NotFound.js":"5","C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\comp\\landing page\\LandingPageHeader.js":"6","C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\comp\\Gameoflife\\Board.js":"7","C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\comp\\Gameoflife\\Grid.js":"8"},{"size":340,"mtime":1653571380138,"results":"9","hashOfConfig":"10"},{"size":654,"mtime":1653571355186,"results":"11","hashOfConfig":"10"},{"size":202,"mtime":1653548766839,"results":"12","hashOfConfig":"10"},{"size":122,"mtime":1653543441082,"results":"13","hashOfConfig":"10"},{"size":125,"mtime":1653543573961,"results":"14","hashOfConfig":"10"},{"size":2701,"mtime":1653599272305,"results":"15","hashOfConfig":"10"},{"size":976,"mtime":1653558690025,"results":"16","hashOfConfig":"10"},{"size":1180,"mtime":1653562077130,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"22ovpd",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"25"},"C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\index.js",[],[],"C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\App.js",["45"],[],"import React from 'react'\nimport { BrowserRouter,Routes,Route } from 'react-router-dom'\nimport Contact from './comp/Contact/Contact'\nimport Board from './comp/Gameoflife/Board'\nimport LandingPage from './comp/landing page/LandingPage'\nimport NotFound from './NotFound'\n\nconst App = () => {\n  return (\n   <>\n  \n\n\n\n    {/* setting up routes for the application */}\n    \n    <Routes>\n      <Route path='/' element={<LandingPage/>}></Route>\n      <Route path='/Contact' element={<Contact/>}></Route>\n      <Route path='/Game' element={<Board/>}></Route>\n      <Route path='*' element={<NotFound/>}></Route>\n    </Routes>\n   \n    </>\n  )\n}\n\nexport default App",[],"C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\comp\\landing page\\LandingPage.js",[],[],"C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\comp\\Contact\\Contact.js",[],[],"C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\NotFound.js",[],[],"C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\comp\\landing page\\LandingPageHeader.js",["46","47"],[],"C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\comp\\Gameoflife\\Board.js",[],[],"C:\\Users\\lawbl\\Desktop\\my-app\\newpharmalink\\src\\comp\\Gameoflife\\Grid.js",["48","49","50"],[],"import React from 'react'\r\nimport { useState } from 'react'\r\n\r\nconst Grid = ({row,col}) => {\r\n \r\n    let arr =[]\r\n    for(let i =0;i<row;i++){\r\n        arr[i]=[]\r\n        for(let j= 0;j<col;j++){\r\n            arr[i][j]=0;\r\n        }\r\n       \r\n    }\r\n    //setting the value gotten from the arr into a sate\r\n    const [grid, setgrid] = useState(arr)\r\n    const [color, setcolor] = useState(`#FFF`)\r\n    //styles for grid\r\n    const gridTemplate ={\r\n        display:'grid',\r\n        height:'500px',\r\n        gridTemplateColumns:'repeat(50, 1fr)',\r\n        gridtemplaterows:' repeat(50, 1fr)'\r\n    }\r\n    //styles for box\r\n    const box ={\r\n        width:'20px',\r\n        height:'20px',\r\n        border:'1px solid #000',\r\n        \r\n    }\r\n  return (\r\n    <>\r\n       \r\n        <div style={gridTemplate}>\r\n           {\r\n               grid.map((col)=>{\r\n                   return col.map((row)=>{\r\n                     return  <div onClick={\r\n                         ()=>{\r\n                         \r\n                         }\r\n                     } style={box}></div>\r\n                   })\r\n               })\r\n           }\r\n        </div>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Grid",{"ruleId":"51","severity":1,"message":"52","line":2,"column":10,"nodeType":"53","messageId":"54","endLine":2,"endColumn":23},{"ruleId":"55","severity":1,"message":"56","line":14,"column":26,"nodeType":"57","endLine":14,"endColumn":43},{"ruleId":"55","severity":1,"message":"56","line":51,"column":20,"nodeType":"57","endLine":51,"endColumn":63},{"ruleId":"51","severity":1,"message":"58","line":15,"column":18,"nodeType":"53","messageId":"54","endLine":15,"endColumn":25},{"ruleId":"51","severity":1,"message":"59","line":16,"column":12,"nodeType":"53","messageId":"54","endLine":16,"endColumn":17},{"ruleId":"51","severity":1,"message":"60","line":16,"column":19,"nodeType":"53","messageId":"54","endLine":16,"endColumn":27},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'setgrid' is assigned a value but never used.","'color' is assigned a value but never used.","'setcolor' is assigned a value but never used."]